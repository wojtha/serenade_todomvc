// Generated by CoffeeScript 1.7.1
(function() {
  var Application, ApplicationController, Persistence, Todo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Application = (function(_super) {
    __extends(Application, _super);

    function Application() {
      return Application.__super__.constructor.apply(this, arguments);
    }

    Application.hasMany('todos', {
      as: (function() {
        return Todo;
      }),
      serialize: true
    });

    Application.property('doneTodos', {
      get: function() {
        return this.todos.filter(function(item) {
          return item.done;
        });
      },
      dependsOn: 'todos:done'
    });

    Application.property('incompleteTodos', {
      get: function() {
        return this.todos.filter(function(item) {
          return !item.done;
        });
      },
      dependsOn: 'todos:done'
    });

    Application.property('completedCount', {
      get: function() {
        return this.doneTodos.length;
      },
      format: function(val) {
        return val || "0";
      },
      dependsOn: 'doneTodos'
    });

    Application.property('incompleteCount', {
      get: function() {
        return this.incompleteTodos.length;
      },
      format: function(val) {
        return val || "0";
      },
      dependsOn: 'incompleteTodos'
    });

    Application.property('allCompleted', {
      get: function() {
        return this.incompleteCount <= 0;
      },
      dependsOn: 'incompleteCount'
    });

    Application.prototype.setTodoDone = function(done) {
      return this.todos.forEach(function(todo) {
        return todo.done = done;
      });
    };

    return Application;

  })(Serenade.Model);

  Todo = (function(_super) {
    __extends(Todo, _super);

    function Todo() {
      return Todo.__super__.constructor.apply(this, arguments);
    }

    Todo.property('done', {
      serialize: true
    });

    Todo.property('status', {
      dependsOn: 'done',
      get: function() {
        if (this.done) {
          return 'done';
        } else {
          return 'active';
        }
      }
    });

    Todo.property('title', {
      serialize: true
    });

    Todo.prototype.toggleDone = function() {
      return this.done = !this.done;
    };

    return Todo;

  })(Serenade.Model);

  ApplicationController = (function() {
    function ApplicationController(app) {
      this.app = app;
    }

    ApplicationController.prototype.setTodoDone = function() {
      if (this.app.allCompleted) {
        return this.app.setTodoDone(false);
      } else {
        return this.app.setTodoDone(true);
      }
    };

    ApplicationController.prototype.clear = function() {
      return this.app.todos = this.app.incompleteTodos;
    };

    ApplicationController.prototype.setTitle = function(target) {
      return this.title = target.value;
    };

    ApplicationController.prototype.addNew = function() {
      if (this.title) {
        return this.app.todos.push({
          title: this.title
        });
      }
    };

    ApplicationController.prototype.toggleDone = function(target, todo) {
      return todo.toggleDone();
    };

    return ApplicationController;

  })();

  Persistence = (function() {
    function Persistence() {}

    Persistence.store = function(key, value) {
      return localStorage.setItem(key, value);
    };

    Persistence.retrieve = function(key) {
      var value;
      value = localStorage.getItem(key);
      if (value) {
        return JSON.parse(value);
      }
    };

    return Persistence;

  })();

  window.onload = function() {
    var app_id, element, localData, script, todoApp;
    app_id = 1;
    localData = Persistence.retrieve("SerenadeTodoApp" + app_id);
    todoApp = localData ? new Application(localData) : new Application.find(app_id);
    todoApp.changed.bind(function() {
      return Persistence.store("SerenadeTodoApp" + this.id, this);
    });
    script = document.getElementById('app');
    element = Serenade.view(script.innerText).render(todoApp, ApplicationController);
    return document.getElementById('todoapp').appendChild(element);
  };

}).call(this);
